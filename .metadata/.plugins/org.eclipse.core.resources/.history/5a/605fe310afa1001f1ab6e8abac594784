package com.eshopping.product.controller;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import com.eshopping.product.converter.ProductConverter;
import com.eshopping.product.dto.ProductDTO;
import com.eshopping.product.service.ProductService;

import io.swagger.v3.oas.annotations.Operation;

@RestController
@RequestMapping("/products")
public class ProductResource {

    @Autowired
    private ProductService productService;

    @Operation(summary = "Add a new product")
    @PostMapping
    public void addProducts(@RequestBody ProductDTO productDTO) {
        productService.addProducts(productDTO);
    }

    @Operation(summary = "Retrieve all products")
    @GetMapping
    public List<ProductDTO> getAllProducts() {
        return productService.getAllProducts();
    }

    @Operation(summary = "Retrieve a product by its ID")
    @GetMapping("/{id}")
    public ResponseEntity<ProductDTO> getProductById(@PathVariable int id) {
        Optional<ProductDTO> productDTO = productService.getProductById(id);
        return productDTO.map(ResponseEntity::ok).orElseGet(() -> ResponseEntity.notFound().build());
    }

    @Operation(summary = "Retrieve a product by its name")
    @GetMapping("/name/{productName}")
    public ResponseEntity<ProductDTO> getProductByName(@PathVariable String productName) {
        Optional<ProductDTO> productDTO = productService.getProductByName(productName);
        return productDTO.map(ResponseEntity::ok).orElseGet(() -> ResponseEntity.notFound().build());
    }

    @Operation(summary = "Retrieve products by category")
    @GetMapping("/category/{category}")
    public List<ProductDTO> getProductByCategory(@PathVariable String category) {
        return productService.getProductByCategory(category);
    }

    @Operation(summary = "Retrieve products by type")
    @GetMapping("/type/{productType}")
    public List<ProductDTO> getProductByType(@PathVariable String productType) {
        return productService.getProductByType(productType);
    }

    @Operation(summary = "Update an existing product")
    @PutMapping
    public ProductDTO updateProduct(@RequestBody ProductDTO productDTO) {
        return productService.updateProducts(productDTO);
    }

    @Operation(summary = "Delete a product by its ID")
    @DeleteMapping("/{id}")
    public void deleteProduct(@PathVariable int id) {
        productService.deleteProductById(id);
    }
}
